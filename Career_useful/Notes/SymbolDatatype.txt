The symbol data type is a primitive data type in JavaScript that creates unique identifiers: 

A symbol is a unique and immutable value that's created using the Symbol() function. Symbols are different from other data types because each one is distinct, even if they have the same description

Symbols are useful for creating unique property keys that are guaranteed not to clash with keys from other code. They're also a good choice for private properties with string keys, where accidental name clashes can be a problem

The JavaScript ES6 introduced a new primitive data type called Symbol. Symbols are immutable (cannot be changed) and are unique. For example,
// two symbols with the same description

const value1 = Symbol('hello');
const value2 = Symbol('hello');

console.log(value1 === value2); // false

typeof()

To access the description of a symbol, we use the . operator. For example,

const x = Symbol('Test');
console.log(x.description); // Test

-------------------

let id = Symbol("id");

let person = {
    name: "Jack",

    // adding symbol as a key
    [id]: 123 // not "id": 123
};

console.log(person); // {name: "Jack", Symbol(id): 123}
--------------

Symbols are not included in for...in Loop

---------------
Benefit of Using Symbols in Object
 We can use the same key name in different codes and avoid duplication issues. For example
 let person = {
    name: "Prasad"
};

// creating Symbol
let id = Symbol("id");

// adding symbol as a key
person[id] = 12;

In the above program, if the person object is also used by another program, then you wouldn't want to add a property that can be accessed or changed by another program. Hence by using Symbol, you create a unique property that you can use.

Now, if the other program also needs to use a property named id, just add a Symbol named id and there won't be duplication issues. For example,

let person = {
    name: "Prasad"
};
let id = Symbol("id");
person[id] = "Another value";